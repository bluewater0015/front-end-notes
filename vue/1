1、指令：
v-bind、v-if、v-for、v-on、v-model。

（1）v-bind：
解决的问题：
动态绑定属性的问题            
class——
属性绑定——让vue的检测机制，把一个属性的值由字符串变成变量。

（2）v-if（v-show）
解决的问题：
v-if解决的是条件渲染的问题
区别：
v-if是一个条件渲染。——根据属性值，会判断是否渲染的问题。true？渲染：不渲染。
v-show是一个条件展示。——每次必定会把dom元素渲染出来。

（3）、v-for
解决的问题：
v-for解决的是一个列表渲染的问题

注意的点：
循环的每一项都可以是对象。例如：[{name:1},{name:2},{name:3}]

(4)、v-on
解决的问题：
v-on解决的是事件绑定的问题

(5)、v-model
解决的问题：
数据的双向绑定问题。

注意的点：
可以通过事件机制和属性绑定的方式来模拟和实现。


数据的双向绑定：
v-model是v-bind+v-on的语法糖。
也就是说，v-model可以通过v-bind和v-on的方式实现。

使用方式：<input type='text' v-model='data' />
等价于：
<input type='text' v-bind:value='data' v-on:input='inputEvent' />
//input事件函数
inputEvent: function(e){
    //e是事件对象——e.target.value
    this.data = e.target.value;
}

2、生命周期函数
beforeCreate——this.$date?
created——this.$date?
beforeMount
mounted
beforeUpdate
updated
beforeDestory
destoryed

(1)、常用的八个生命周期函数——一般先执行create和mount（创建和挂载时期的周期函数）
(2)、由于beforeCreate周期函数还没有数据对象，所以这里面无法访问数据。
因此，不在beforeCreate周期函数中进行数据请求。
(3)、created，就是进行数据操作和数据请求的周期函数。
(4)、在组件的挂载期，我们才能访问$el的事例。
(5)、在mount周期函数执行之前，改变$data,不执行update。
在mount周期函数执行之后，改变$data实例，执行uodate。
(6)、destory组件销毁期间，我们可以做什么？
我们能够做的是，清除开启的定时器。清除绑定的原生事件等等。。。

3、vue-cli脚手架的使用
(1)、会出现一个错误——chorme
//.npmrc
chromedriver_cdnurl=https://npm.taobao.org/mirrors/chromedriver
phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjs
operadriver_cdnurl=http://npm.taobao.org/mirrors/operadriver
(2)、import ...from url:
url:如果是通过npm下载的包，可以不使用相对路径的写法。
如果是我们自己写的js文件，是需要用相对路径的写法的。
(3)、各个项目文件的作用是什么？
a、README.md——向我们介绍一个项目的运行情况。
b、package.json——npm init就会得到这个文件夹。
    dependencies——npm install --save
    devDependencies——npm install --save-dev
    示例：moment.js

c、postcssrc——模块化css。scoped：局部css。

d、npmrc——指定了一个新的npm下载包的路径

e、.gitignore——忽视git的提交的文件（git）

f、babel——es6解析。

（4）、项目目录
src：开发目录（任何项目，都有一个开发目录，而且只有这一个入口。）
build：项目的打包目录。
config：脚手架自身的配置目录。
test：测试。主要是运行npm run test测试的时候使用的。
测试分为单元测试和e2e测试。
static：放置一些静态不变的文件、图片、或者其他的东西。
node_modules: 运行npm install 的时候，会生成这样的一个文件夹。
存放的东西就是，package.json文件中devDependencies和dependencies中的依赖包。

4、git

Git是目前世界上最先进的分布式版本控制系统（没有之一）
版本控制工具：一阶段：10天。
相当于一种更安全的代码管理方式。

1、git init——初始化一个git版本库。（执行之后生成.git文件夹）
2、git status——查看当前git版本库的状态。
3、工作区、暂存区、master、HEAD。
工作区：我们写代码的地方。
暂存区：我们通过add命令放到一个库中，这个库叫做暂存区。
master：通过commit命令添加到分支上，就叫master。
HEAD：通过改变这个的指向来进行版本控制（reset）；
4、git add；
git add . ——这个命令让所有文件都提交到暂存区。
git add fileName——提交一个文件名为fileName的文件到暂存区。

5、git commit——把暂存区的信息提交到master上。
必须要有提交信息，例如：git commit -m "first commit"

6、git log——查看提交的commit日志。

7、git config
    git config --list ：查看我们的git的配置信息。
    git config --global user.name 'yourname'
    git config --global user.email 'youremail'

8、.gitignore——就是把git不想提交的东西，给忽略掉。

8、git reset
    git reset --HEAD^——回退到上一个commit版本
    git reset --hard id——回退到任何的commit版本











































